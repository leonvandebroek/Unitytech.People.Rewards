@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Unitytech.People.Rewards.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject DialogService DialogService
@implements IDisposable

<PageTitle>Leden</PageTitle>

<h1>Heej!</h1>

Welkom bij de People Rewards app.

<RadzenButton Text=@($"Lid toevoegen") ButtonStyle="ButtonStyle.Primary" Click=@(() => { NewPerson(); }) />

<RadzenDataGrid AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true"
                Data="@people" TItem="Person">
    <Columns>
        <RadzenDataGridColumn TItem="Person" Property="Employee.LastName" Title="Lid">
            <Template Context="person">
                <h5 class="mt-1 mb-0">@person?.FirstName @person?.MiddleName @person?.LastName</h5>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Person" Property="BirthDate" Title="Verjaardag" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="Person" Property="MemberSince" Title="Lid sinds" />
        <RadzenDataGridColumn TItem="Person" Property="MemberUntil" Title="Lid tot" />
    </Columns>
</RadzenDataGrid>
@code{
    Person[] people { get; set; }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {

    }

    public async Task NewPerson()
    {
        await DialogService.OpenAsync<PersonCreate>($"Lid toevoegen",
               new Dictionary<string, object>() { { "Person", new Person() } },
           new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });
    }

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;

        try
        {
            people = await Http.GetFromJsonAsync<Person[]>("People");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}