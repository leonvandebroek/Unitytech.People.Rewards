// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unitytech.People.Rewards.Data.Repository;

#nullable disable

namespace Unitytech.People.Rewards.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220807131801_InitialSQLServer")]
    partial class InitialSQLServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Unitytech.People.Rewards.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MemberUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c35bee56-f515-4158-955c-04bb8b15c007"),
                            BirthDate = new DateTime(1992, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Teststad",
                            DateCreated = new DateTime(2022, 8, 7, 15, 18, 0, 972, DateTimeKind.Local).AddTicks(1800),
                            DateDeleted = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Department = "Scouts",
                            Email = "lvdh@me.com",
                            FirstName = "Léon",
                            Initials = "L.G.E.",
                            LastName = "Broek",
                            MemberNumber = "1258257",
                            MemberSince = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberUntil = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "van de",
                            Phone = "06-12345678",
                            Street = "Teststraat",
                            StreetNumber = "1",
                            Zipcode = "7546HR"
                        },
                        new
                        {
                            Id = new Guid("a786916e-d36f-4612-b679-77a1c8986052"),
                            BirthDate = new DateTime(1994, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Duckstad",
                            DateCreated = new DateTime(2022, 8, 7, 15, 18, 0, 972, DateTimeKind.Local).AddTicks(1880),
                            DateDeleted = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Department = "Roverscouts",
                            Email = "tvdt@me.com",
                            FirstName = "Test",
                            Initials = "T.E.S.T.",
                            LastName = "Test",
                            MemberNumber = "1258258",
                            MemberSince = new DateTime(1999, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberUntil = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "van der",
                            Phone = "06-87654321",
                            Street = "Ganzenlaan",
                            StreetNumber = "21",
                            Zipcode = "7544HO"
                        },
                        new
                        {
                            Id = new Guid("ace7cad3-cea8-4520-814e-f14c89778908"),
                            BirthDate = new DateTime(1991, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Simcity",
                            DateCreated = new DateTime(2022, 8, 7, 15, 18, 0, 972, DateTimeKind.Local).AddTicks(1910),
                            DateDeleted = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Department = "Plusscouts",
                            Email = "pp@me.com",
                            FirstName = "Pietje",
                            Initials = "P.P",
                            LastName = "Puk",
                            MemberNumber = "1258259",
                            MemberSince = new DateTime(1996, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberUntil = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "",
                            Phone = "06-87651234",
                            Street = "Motherload avenue",
                            StreetNumber = "5",
                            Zipcode = "1234DH"
                        });
                });

            modelBuilder.Entity("Unitytech.People.Rewards.Data.Entities.PersonReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RewardId");

                    b.ToTable("PeopleRewards");
                });

            modelBuilder.Entity("Unitytech.People.Rewards.Data.Entities.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AwardDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervalInMonths")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Unitytech.People.Rewards.Data.Entities.PersonReward", b =>
                {
                    b.HasOne("Unitytech.People.Rewards.Data.Entities.Person", "Person")
                        .WithMany("ReceivedRewards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unitytech.People.Rewards.Data.Entities.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Unitytech.People.Rewards.Data.Entities.Person", b =>
                {
                    b.Navigation("ReceivedRewards");
                });
#pragma warning restore 612, 618
        }
    }
}
